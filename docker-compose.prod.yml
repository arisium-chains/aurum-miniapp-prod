services:
  # Nginx reverse proxy
  nginx:
    build:
      context: ./deploy/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      # Uncomment when SSL is configured:
      # - "443:443"
    depends_on:
      app:
        condition: service_healthy
      ml-api:
        condition: service_healthy
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/conf:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - aurum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Next.js application
  app:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    ports:
      - "3002:3000" # Expose for direct access if needed, but typically via Nginx
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - ML_API_URL=http://ml-api:3000
    depends_on:
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./apps/web/public/models:/app/public/models
    restart: unless-stopped
    networks:
      - aurum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ML Face Scoring API
  ml-api:
    build:
      context: .
      dockerfile: apps/ml-api/Dockerfile
    ports:
      - "3001:3000" # Expose port 3001 externally, map to 3000 internally
    env_file:
      - ./apps/ml-api/.env.production
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/ml-api/temp:/app/temp
      - ./apps/ml-api/models:/app/models
    restart: unless-stopped
    networks:
      - aurum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333" # Expose for direct access if needed
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped
    networks:
      - aurum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache and queue
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379" # Expose for direct access if needed
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - aurum-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  aurum-network:
    driver: bridge
    name: aurum-network-prod
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  qdrant_storage:
    name: aurum_qdrant_storage
  redis_data:
    name: aurum_redis_data
  nginx_logs:
    name: aurum_nginx_logs
