# 🌟 Aurum Circle Miniapp - Justfile
# Easy commands to run and manage the miniapp

# Default recipe - shows available commands
default:
    @echo "🌟 Aurum Circle Miniapp Commands:"
    @echo ""
    @echo "🚀 Setup & Run:"
    @echo "  just setup      - Complete ML setup (one command)"
    @echo "  just run        - Setup and start the miniapp"
    @echo "  just dev        - Start development server"
    @echo "  just install    - Install dependencies"
    @echo ""
    @echo "🤖 ML Models:"
    @echo "  just setup-ml   - Setup ML models and configuration"
    @echo "  just test-ml    - Test ML model integration"
    @echo "  just test-demo  - Quick demo test with simulated scoring"
    @echo "  just models     - Show model information"
    @echo ""
    @echo "🎯 Demos:"
    @echo "  just demo-old   - Open old AI scoring demo"
    @echo "  just demo-new   - Open attractiveness engine demo"
    @echo ""
    @echo "🔧 Configuration:"
    @echo "  just setup-env  - Create .env.local template"
    @echo "  just check-env  - Validate environment config"
    @echo ""
    @echo "🏗️ Build & Deploy:"
    @echo "  just build      - Build for production"
    @echo "  just start      - Start production server"
    @echo "  just deploy     - Deploy to Vercel"
    @echo "  just deploy-ml  - Deploy to Fly.io with real ML models"
    @echo "  just deploy-all - Deploy all services with Docker Compose"
    @echo "  just deploy-all-absolute - Deploy with absolute paths (server)"
    @echo "  just deploy-ec2 - Deploy to EC2 instance"
    @echo "  just status-all - Check status of all services"
    @echo "  just stop-all   - Stop all services"
    @echo "  just docker-compose-help - Show Docker Compose usage guide"
    @echo ""
    @echo "🧹 Maintenance:"
    @echo "  just clean      - Clean node_modules and build"
    @echo "  just lint       - Run ESLint"
    @echo "  just type-check - Run TypeScript check"
    @echo ""
    @echo "📱 Testing:"
    @echo "  just show-urls  - Show local and mobile URLs"
    @echo "  just ngrok      - Start ngrok tunnel for HTTPS testing"
    @echo "  just demo       - Run with demo credentials (skip World ID setup)"
    @echo ""
    @echo "☁️  Cloud Deployment:"
    @echo "  just ec2-setup  - Setup EC2 instance with all dependencies"
    @echo "  just ec2-deploy - Deploy application to EC2"
    @echo "  just ec2-status - Check EC2 deployment status"

# Complete ML setup (one command as requested)
setup:
    @echo "🤖 Setting up Aurum Circle with ML models..."
    @just check-node
    @just install
    @just setup-ml
    @just setup-env
    @just check-env
    @just show-demo-info
    @echo "🚀 Starting development server..."
    npm run dev

# Main command - setup and run the miniapp
run:
    @echo "🌟 Starting Aurum Circle Miniapp..."
    @just check-node
    @just install
    @just setup-env
    @just check-env
    @just show-urls
    @echo "🚀 Starting development server..."
    npm run dev

# Start development server
dev:
    @echo "🚀 Starting development server..."
    npm run dev

# Install dependencies
install:
    @echo "📦 Installing dependencies..."
    npm install

# Setup ML models and configuration
setup-ml:
    @echo "🤖 Setting up ML models..."
    chmod +x scripts/setup-ml-models.sh
    ./scripts/setup-ml-models.sh
    @echo "✅ ML models configured"

# Test ML model integration
test-ml:
    @echo "🧪 Testing ML models..."
    @echo "Checking model files..."
    @if [ -f "public/models/model_config.json" ]; then echo "✅ Model config found"; else echo "❌ Model config missing"; fi
    @echo ""
    @echo "Testing API endpoint..."
    @curl -s http://localhost:3000/api/attractiveness/ml-status | jq . || echo "⚠️  Server not running. Start with: just dev"
    
# Quick demo test with simulated scoring
test-demo:
    @echo "🎯 Testing attractiveness demo with simulated data..."
    @echo ""
    @echo "Testing scoring API..."
    @curl -s -X POST http://localhost:3000/api/attractiveness/score \
        -H "Content-Type: application/json" \
        -d '{"userId":"demo-user-$$(date +%s)","image":"R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7","nftVerified":true,"wldVerified":true,"useRealML":false}' | \
        jq '.success, .message, .debug.mlMode' || echo "❌ Server not running or API failed"
    @echo ""
    @echo "✅ Demo ready! Open: http://localhost:3000/attractiveness-demo"

# Show model information
models:
    @echo "📊 ML Model Information:"
    @echo ""
    @echo "🔍 Face Detection: MediaPipe BlazeFace"
    @echo "  • Input: 192×192 pixels"
    @echo "  • Output: Bounding boxes + 6 landmarks"
    @echo "  • Location: public/models/face_detection/"
    @echo ""
    @echo "🧠 Face Embeddings: ArcFace R100"
    @echo "  • Input: 112×112 aligned face crop"
    @echo "  • Output: 512-dimensional embedding"
    @echo "  • Location: public/models/arcface/"
    @echo ""
    @echo "⚙️  Configuration: public/models/model_config.json"
    @echo ""
    @if [ -f "public/models/model_config.json" ]; then echo "✅ Models configured"; else echo "❌ Run 'just setup-ml' first"; fi

# Open old AI scoring demo
demo-old:
    @echo "🎯 Opening old AI scoring demo..."
    @echo "URL: http://localhost:3000/ai-demo"
    @if command -v open &> /dev/null; then open http://localhost:3000/ai-demo; fi

# Open new attractiveness engine demo
demo-new:
    @echo "🎯 Opening attractiveness engine demo..."
    @echo "URL: http://localhost:3000/attractiveness-demo"
    @if command -v open &> /dev/null; then open http://localhost:3000/attractiveness-demo; fi

# Show demo information
show-demo-info:
    @echo ""
    @echo "🎯 Available Demos:"
    @echo "  • Old AI Demo:         http://localhost:3000/ai-demo"
    @echo "  • Attractiveness Demo: http://localhost:3000/attractiveness-demo"
    @echo ""
    @echo "🔌 API Endpoints:"
    @echo "  • Old Scoring:         POST /api/ai/score"
    @echo "  • New Scoring:         POST /api/attractiveness/score"
    @echo "  • ML Status:           GET  /api/attractiveness/ml-status"
    @echo ""
    @echo "💡 Quick Test Commands:"
    @echo "  just demo-old    - Open old demo"
    @echo "  just demo-new    - Open new demo"
    @echo "  just test-ml     - Test ML integration"
    @echo ""
    @echo "ℹ️  Note: Currently using simulated ML models by default."
    @echo "   Real ML models require setup. Run 'just setup-ml' to configure."
    @echo ""

# Setup environment file
setup-env:
    #!/usr/bin/env bash
    if [ ! -f ".env.local" ]; then
        echo "🔧 Creating .env.local template..."
        {
            echo "# ===== REQUIRED CONFIGURATION ====="
            echo "# Get these from https://developer.worldcoin.org/"
            echo ""
            echo "# World ID Configuration (REQUIRED)"
            echo "# 1. Create app at https://developer.worldcoin.org/"
            echo "# 2. Set App Type to \"Miniapp\""
            echo "# 3. Copy App ID and App Secret below"
            echo "NEXT_PUBLIC_WORLDCOIN_APP_ID=app_staging_your_actual_app_id_here"
            echo "WORLDCOIN_APP_SECRET=sk_your_actual_app_secret_here"
            echo ""
            echo "# JWT Configuration (REQUIRED)"
            echo "# Generate a secure random string for session management"
            echo "# Use: openssl rand -base64 32"
            echo "JWT_SECRET=dev-jwt-secret-change-in-production-12345"
            echo ""
            echo "# ===== OPTIONAL CONFIGURATION ====="
            echo ""
            echo "# Wallet Connect Configuration (for future features)"
            echo "NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID=your_wallet_connect_project_id"
            echo ""
            echo "# Blockchain Configuration (for NFT verification)"
            echo "ALCHEMY_API_KEY=your_alchemy_api_key"
            echo "NEXT_PUBLIC_CHAIN_ID=1"
            echo ""
            echo "# NFT Contract Configuration (Bangkok University NFTs)"
            echo "NFT_CONTRACT_ADDRESS=0x1234567890123456789012345678901234567890"
            echo ""
            echo "# Environment"
            echo "NODE_ENV=development"
        } > .env.local
        echo "✅ Created .env.local template"
        echo ""
        echo "⚠️  IMPORTANT: Update .env.local with your World ID credentials!"
        echo "   1. Visit: https://developer.worldcoin.org/"
        echo "   2. Create a new app with type 'Miniapp'"
        echo "   3. Copy App ID and App Secret to .env.local"
        echo "   4. Run 'just check-env' to validate"
    else
        echo "✅ .env.local already exists"
    fi

# Check environment configuration
check-env:
    #!/usr/bin/env bash
    echo "🔍 Checking environment configuration..."
    
    if [ ! -f ".env.local" ]; then
        echo "❌ .env.local not found. Run 'just setup-env' first."
        exit 1
    fi
    
    if grep -q "your_actual_app_id_here" .env.local; then
        echo "❌ Please update NEXT_PUBLIC_WORLDCOIN_APP_ID in .env.local"
        echo "   Visit: https://developer.worldcoin.org/ to get your App ID"
        exit 1
    fi
    
    if grep -q "your_actual_app_secret_here" .env.local; then
        echo "❌ Please update WORLDCOIN_APP_SECRET in .env.local"
        echo "   Visit: https://developer.worldcoin.org/ to get your App Secret"
        exit 1
    fi
    
    echo "✅ Environment configuration looks good"

# Check if Node.js is installed
check-node:
    #!/usr/bin/env bash
    if ! command -v node &> /dev/null; then
        echo "❌ Node.js is not installed. Please install Node.js first:"
        echo "   Visit: https://nodejs.org/"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        echo "❌ npm is not installed. Please install npm first."
        exit 1
    fi
    
    echo "✅ Node.js and npm are installed"

# Show access URLs for testing
show-urls:
    #!/usr/bin/env bash
    echo ""
    echo "📱 Access URLs:"
    echo "   Local:    http://localhost:3000"
    
    # Get local IP for mobile testing
    if command -v ifconfig &> /dev/null; then
        LOCAL_IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -1)
        if [ ! -z "$LOCAL_IP" ]; then
            echo "   Mobile:   http://$LOCAL_IP:3000"
        fi
    fi
    
    echo ""
    echo "🔧 For World App testing:"
    echo "   1. Install World App on your phone"
    echo "   2. Complete World ID verification (Orb required)"
    echo "   3. Open the mobile URL above in World App browser"
    echo ""
    echo "📖 Need help? Check DEV_SETUP.md or WORLD_ID_SETUP.md"
    echo ""

# Build for production
build:
    @echo "🏗️ Building for production..."
    npm run build

# Start production server
start:
    @echo "🚀 Starting production server..."
    npm run start

# Deploy to Vercel
deploy:
    @echo "🚀 Deploying to Vercel..."
    @just build
    vercel --prod
# Deploy to Fly.io with real ML models
deploy-ml:
    @echo "🚀 Deploying to Fly.io with Real ML Models..."
    @if [ ! -x "scripts/deploy-ml-flyio.sh" ]; then chmod +x scripts/deploy-ml-flyio.sh; fi
    ./scripts/deploy-ml-flyio.sh

# Deploy all services with Docker Compose
deploy-all:
    @echo "🚀 Deploying all services with Docker Compose..."
    @echo "Building and starting all services..."
    docker-compose -f docker-compose.yml up --build -d
    @echo "✅ All services deployed successfully!"
    @echo ""
    @echo "📱 Access URLs:"
    @echo "   Main App:    http://localhost:3000"
    @echo "   Qdrant API:  http://localhost:6334"
    @echo ""
    @echo "📊 Service Status:"
    docker-compose -f docker-compose.yml ps

# Deploy all services with Docker Compose using absolute paths (for server deployment)
deploy-all-absolute:
    @echo "🚀 Deploying all services with Docker Compose (Absolute Paths)..."
    @echo "Building and starting all services..."
    docker-compose -f docker-compose-absolute.yml up --build -d
    @echo "✅ All services deployed successfully!"
    @echo ""
    @echo "📱 Access URLs:"
    @echo "   Main App:    http://localhost:3000"
    @echo "   Qdrant API:  http://localhost:6334"
    @echo ""
    @echo "📊 Service Status:"
    docker-compose -f docker-compose-absolute.yml ps

# Show Docker Compose usage guide
docker-compose-help:
    @echo "📖 Docker Compose Usage Guide:"
    @echo ""
    @echo "Available Docker Compose files:"
    @echo "  docker-compose.yml          - Default with relative paths"
    @echo "  docker-compose-absolute.yml - Server deployment with absolute paths"
    @echo ""
    @echo "Commands:"
    @echo "  just deploy-all             - Deploy with default docker-compose.yml"
    @echo "  just deploy-all-absolute    - Deploy with docker-compose-absolute.yml"
    @echo "  just status-all             - Check status with default file"
    @echo "  just stop-all               - Stop services with default file"
    @echo ""
    @echo "For detailed instructions, see: DOCKER_COMPOSE_USAGE_GUIDE.md"
    @echo "in the project root directory."


# EC2 Setup - Install all dependencies on EC2 instance
ec2-setup: 
    @echo "🔧 Setting up EC2 instance for Aurum Circle..."
    # Update system packages
    sudo apt update
    
    # Install Node.js
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
    
    # Install Git
    sudo apt install -y git
    
    # Install build essentials
    sudo apt install -y build-essential
    
    # Install Redis
    sudo apt install -y redis
    sudo systemctl start redis-server
    sudo systemctl enable redis-server
    
    # Install Docker
    sudo apt install -y docker.io
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Nginx will be run via Docker
    echo "Nginx will be run via Docker container"
    
    # Install PM2
    sudo npm install -g pm2
    
    # Install Certbot for SSL
    sudo apt install -y certbot python3-certbot-nginx
    
    echo "✅ EC2 instance setup complete"

# Deploy to EC2 instance
ec2-deploy:
	@echo "🚀 Deploying to EC2 instance..."
	
	# Clone repository (if not already cloned)
	@if [ ! -f "package.json" ]; then echo "❌ Please run this command from the project root directory"; exit 1; fi
	
	# Install dependencies
	npm install
	
	# Setup ML models (create placeholders)
	mkdir -p public/models/arcface
	mkdir -p public/models/face_detection
	touch public/models/arcface/1k3d68.onnx
	touch public/models/arcface/2d106det.onnx
	touch public/models/arcface/buffalo_l.zip
	touch public/models/arcface/det_10g.onnx
	touch public/models/arcface/genderage.onnx
	touch public/models/arcface/w600k_r50.onnx
	touch public/models/face_detection/model.tflite
	
	# Setup environment
	@if [ ! -f ".env.local" ]; then touch .env.local; fi
	
	# Build application
	npm run build
	
	# Start with docker-compose
	docker-compose -f docker-compose.yml up --build -d
	
	# Setup Nginx reverse proxy using Docker
	# Create Nginx config directory
	mkdir -p nginx/conf
	# Create Nginx config file
	echo "server {\n    listen 80;\n    server_name your-domain.com;  # Replace with your domain or EC2 public IP\n\n    location / {\n        proxy_pass http://app:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \$host;\n        proxy_set_header X-Real-IP \$remote_addr;\n        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \$scheme;\n        proxy_cache_bypass \$http_upgrade;\n    }\n}" > nginx/conf/default.conf
	
	# Start Nginx container
	sudo docker run -d \
	  --name aurum-nginx \
	  -p 80:80 \
	  -v $(pwd)/nginx/conf:/etc/nginx/conf.d \
	  --add-host=host.docker.internal:host-gateway \
	  nginx:alpine
	
	echo "✅ Deployment to EC2 complete"
	echo "⚠️  Remember to:"
	echo "   1. Update Nginx configuration with your domain or IP"
	echo "   2. Configure your .env.local with actual values"
	echo "   3. Replace placeholder ML models with real ones"
	echo "   4. Set up SSL certificate with Let's Encrypt if needed"

# Check EC2 deployment status
ec2-status:
    @echo "🔍 Checking EC2 deployment status..."
    
    # Check if required services are running
    @if sudo docker ps | grep -q aurum-nginx; then echo "✅ Nginx container is running"; else echo "❌ Nginx container is not running"; fi
    @if docker-compose -f docker-compose.yml ps | grep -q "Up"; then echo "✅ App containers are running"; else echo "❌ App containers are not running"; fi
    
    # Show docker-compose status
    echo ""
    echo "📊 docker-compose Status:"
    docker-compose -f docker-compose.yml ps
    
    # Show listening ports
    echo ""
    echo "🔌 Listening Ports:"
    netstat -tlnp | grep :3000 || echo "App not listening on port 3000"
    netstat -tlnp | grep :3001 || echo "ML API not listening on port 3001"
    netstat -tlnp | grep :6333 || echo "Qdrant not listening on port 6333"
    netstat -tlnp | grep :6379 || echo "Redis not listening on port 6379"
    sudo docker ps | grep aurum-nginx || echo "Nginx container not running"

# Check EC2 deployment status (absolute paths version)
ec2-status-absolute:
    @echo "🔍 Checking EC2 deployment status (absolute paths)..."
    
    # Check if required services are running
    @if sudo docker ps | grep -q aurum-nginx; then echo "✅ Nginx container is running"; else echo "❌ Nginx container is not running"; fi
    @if docker-compose -f docker-compose-absolute.yml ps | grep -q "Up"; then echo "✅ App containers are running"; else echo "❌ App containers are not running"; fi
    
    # Show docker-compose status
    echo ""
    echo "📊 docker-compose Status:"
    docker-compose -f docker-compose-absolute.yml ps
    
    # Show listening ports
    echo ""
    echo "🔌 Listening Ports:"
    netstat -tlnp | grep :3000 || echo "App not listening on port 3000"
    netstat -tlnp | grep :3001 || echo "ML API not listening on port 3001"
    netstat -tlnp | grep :6333 || echo "Qdrant not listening on port 6333"
    netstat -tlnp | grep :6379 || echo "Redis not listening on port 6379"
    sudo docker ps | grep aurum-nginx || echo "Nginx container not running"
# Deploy to EC2 instance with absolute paths
ec2-deploy-absolute:
	@echo "🚀 Deploying to EC2 instance (absolute paths)..."
	
	# Clone repository (if not already cloned)
	@if [ ! -f "package.json" ]; then echo "❌ Please run this command from the project root directory"; exit 1; fi
	
	# Install dependencies
	npm install
	
	# Setup ML models (create placeholders)
	mkdir -p public/models/arcface
	mkdir -p public/models/face_detection
	touch public/models/arcface/1k3d68.onnx
	touch public/models/arcface/2d106det.onnx
	touch public/models/arcface/buffalo_l.zip
	touch public/models/arcface/det_10g.onnx
	touch public/models/arcface/genderage.onnx
	touch public/models/arcface/w600k_r50.onnx
	touch public/models/face_detection/model.tflite
	
	# Setup environment
	@if [ ! -f ".env.local" ]; then touch .env.local; fi
	
	# Build application
	npm run build
	
	# Start with docker-compose using absolute paths
	docker-compose -f docker-compose-absolute.yml up --build -d
	
	# Setup Nginx reverse proxy using Docker
	# Create Nginx config directory
	mkdir -p nginx/conf
	# Create Nginx config file
	echo "server {\n    listen 80;\n    server_name your-domain.com;  # Replace with your domain or EC2 public IP\n\n    location / {\n        proxy_pass http://app:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \$host;\n        proxy_set_header X-Real-IP \$remote_addr;\n        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \$scheme;\n        proxy_cache_bypass \$http_upgrade;\n    }\n}" > nginx/conf/default.conf
	
	# Start Nginx container
	sudo docker run -d \
	  --name aurum-nginx \
	  -p 80:80 \
	  -v $(pwd)/nginx/conf:/etc/nginx/conf.d \
	  --add-host=host.docker.internal:host-gateway \
	  nginx:alpine
	
	echo "✅ Deployment to EC2 complete (absolute paths)"
	echo "⚠️  Remember to:"
	echo "   1. Update Nginx configuration with your domain or IP"
	echo "   2. Configure your .env.local with actual values"
	echo "   3. Replace placeholder ML models with real ones"
	echo "   4. Set up SSL certificate with Let's Encrypt if needed"

# Deploy to EC2 (alias for ec2-deploy)
deploy-ec2:
    @just ec2-deploy
# Check status of all services
status-all:
    @echo "🔍 Checking status of all services..."
    docker-compose -f docker-compose.yml ps

# Check status of all services (absolute paths version)
status-all-absolute:
    @echo "🔍 Checking status of all services (absolute paths)..."
    docker-compose -f docker-compose-absolute.yml ps

# Stop all services
stop-all:
    @echo "🛑 Stopping all services..."
    docker-compose -f docker-compose.yml down
    @echo "✅ All services stopped"

# Stop all services (absolute paths version)
stop-all-absolute:
    @echo "🛑 Stopping all services (absolute paths)..."
    docker-compose -f docker-compose-absolute.yml down
    @echo "✅ All services stopped"



# Clean build artifacts and dependencies
clean:
    @echo "🧹 Cleaning project..."
    rm -rf node_modules
    rm -rf .next
    rm -rf out
    @echo "✅ Cleaned node_modules and build files"

# Run ESLint
lint:
    @echo "🔍 Running ESLint..."
    npm run lint

# Run TypeScript check
type-check:
    @echo "🔍 Running TypeScript check..."
    npx tsc --noEmit

# Start ngrok tunnel for HTTPS testing
ngrok port="3000":
    @echo "🌐 Starting ngrok tunnel on port {{port}}..."
    @echo "This will provide HTTPS URL for World App testing"
    ngrok http {{port}}

# Generate secure JWT secret
generate-jwt:
    @echo "🔐 Generated JWT secret:"
    @openssl rand -base64 32

# Show project status
status:
    @echo "📊 Project Status:"
    @echo "Node.js: $(node --version)"
    @echo "npm: $(npm --version)"
    @if [ -f "package.json" ]; then echo "Project: $(cat package.json | grep '"name"' | cut -d'"' -f4)"; fi
    @if [ -f ".env.local" ]; then echo "✅ .env.local exists"; else echo "❌ .env.local missing"; fi
    @if [ -d "node_modules" ]; then echo "✅ Dependencies installed"; else echo "❌ Dependencies not installed"; fi

# Open documentation
docs:
    @echo "📖 Opening documentation..."
    @if command -v open &> /dev/null; then open DEV_SETUP.md; fi
    @if command -v xdg-open &> /dev/null; then xdg-open DEV_SETUP.md; fi

# Quick setup for new developers
quick-setup:
    @echo "⚡ Quick setup for new developers..."
    @just check-node
    @just install
    @just setup-env
    @echo ""
    @echo "🎉 Setup complete! Next steps:"
    @echo "1. Edit .env.local with your World ID credentials"
    @echo "2. Run 'just run' to start the miniapp"
    @echo "3. Check 'just docs' for detailed instructions"

# Demo mode - run with demo credentials
demo:
    @echo "🎭 Starting Aurum Circle in Demo Mode..."
    @just check-node
    @just install
    @just setup-env
    @just setup-demo-env
    @just show-urls
    @echo "🚀 Starting development server in demo mode..."
    npm run dev

# Setup demo environment
setup-demo-env:
    @echo "🎭 Setting up demo credentials..."
    @sed -i.bak 's/app_staging_your_actual_app_id_here/app_staging_demo_test_12345/g' .env.local
    @sed -i.bak 's/sk_your_actual_app_secret_here/sk_demo_test_secret_67890/g' .env.local
    @echo "✅ Demo credentials configured"
    @echo "⚠️  Note: World ID verification will not work in demo mode"

# Integration test - test both old and new APIs
integration-test:
    @echo "🧪 Running integration tests..."
    @echo ""
    @echo "Testing ML model health..."
    @curl -s http://localhost:3000/api/attractiveness/ml-status | jq '.data.health.status' | grep -q "healthy" && echo "✅ ML models healthy" || echo "⚠️  ML models degraded - will use simulated mode"
    @echo ""
    @echo "Testing old AI scoring API..."
    @curl -s -X POST http://localhost:3000/api/ai/score -H "Content-Type: application/json" -d '{"imageBase64":"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==","features":{"attractiveness":8}}' | jq '.success' | grep -q "true" && echo "✅ Old API working" || echo "❌ Old API failed"
    @echo ""
    @echo "Testing new attractiveness API..."
    @curl -s -X POST http://localhost:3000/api/attractiveness/score -H "Content-Type: application/json" -d '{"userId":"test-user-123","image":"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==","nftVerified":true,"wldVerified":true}' | jq '.success' | grep -q "false" && echo "✅ New API responding (expected rejection for test image)" || echo "❌ New API not responding"

# Show complete project status
full-status:
    @echo "🔍 Complete Project Status:"
    @echo ""
    @echo "📦 Dependencies:"
    @if [ -d "node_modules" ]; then echo "  ✅ node_modules installed"; else echo "  ❌ Run 'just install'"; fi
    @echo ""
    @echo "🤖 ML Models:"
    @if [ -f "public/models/model_config.json" ]; then echo "  ✅ Model config found"; else echo "  ❌ Run 'just setup-ml'"; fi
    @if [ -d "public/models/face_detection" ]; then echo "  ✅ Face detection model configured"; else echo "  ⚠️  Face detection needs setup"; fi
    @if [ -d "public/models/arcface" ]; then echo "  ✅ ArcFace embedding model configured"; else echo "  ⚠️  ArcFace model needs setup"; fi
    @echo ""
    @echo "⚙️  Configuration:"
    @if [ -f ".env.local" ]; then echo "  ✅ Environment configured"; else echo "  ❌ Run 'just setup-env'"; fi
    @if [ -f "scripts/setup-ml-models.sh" ]; then echo "  ✅ ML setup script found"; else echo "  ❌ ML setup script missing"; fi
    @echo ""
    @echo "🎯 Demo Pages:"
    @echo "  • Old AI Demo:         /ai-demo"
    @echo "  • Attractiveness Demo: /attractiveness-demo"
    @echo ""
    @echo "🔗 API Endpoints:"
    @echo "  • Old Scoring:         POST /api/ai/score"
    @echo "  • Score Interpreter:   POST /api/ai/score-interpreter"
    @echo "  • New Scoring:         POST /api/attractiveness/score"
    @echo "  • ML Health Check:     GET  /api/attractiveness/ml-status"
    @echo "  • Leaderboard:         GET  /api/attractiveness/leaderboard"
    @echo ""

# Quick help for the main setup command
setup-help:
    @echo "🚀 Quick Setup Guide:"
    @echo ""
    @echo "1. One-command setup (recommended):"
    @echo "   just setup"
    @echo ""
    @echo "2. Manual setup:"
    @echo "   just install        # Install dependencies"
    @echo "   just setup-ml       # Setup ML models"
    @echo "   just setup-env      # Create environment file"
    @echo "   just dev            # Start development server"
    @echo ""
    @echo "3. After setup:"
    @echo "   just demo-old       # Test old AI scoring"
    @echo "   just demo-new       # Test attractiveness engine"
    @echo "   just test-ml        # Verify ML integration"
    @echo ""
    @echo "📖 For detailed information:"
    @echo "   just models         # Show ML model details"
    @echo "   just full-status    # Complete project status"