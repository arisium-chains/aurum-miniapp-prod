version: "3.8"

services:
  # Main Next.js application
  app:
    build:
      context: ./aurum-circle-miniapp
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6337
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      ml-api:
        condition: service_started
    volumes:
      - ./aurum-circle-miniapp/public/models:/app/public/models
    restart: unless-stopped

  # ML Face Scoring API
  ml-api:
    build:
      context: ./aurum-circle-miniapp/ml-face-score-api
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./aurum-circle-miniapp/ml-face-score-api/temp:/app/temp
      - ./aurum-circle-miniapp/ml-face-score-api/models:/app/models
    restart: unless-stopped

  # ML Worker for processing face scoring jobs
  ml-worker:
    build:
      context: ./aurum-circle-miniapp/ml-face-score-api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./aurum-circle-miniapp/ml-face-score-api/temp:/app/temp
      - ./aurum-circle-miniapp/ml-face-score-api/models:/app/models
    command: node dist/worker.js
    restart: unless-stopped

  # Redis for job queue and caching (shared between services)
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6337:6333"
      - "6338:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    restart: unless-stopped

volumes:
  redis_data:
  qdrant_storage:
